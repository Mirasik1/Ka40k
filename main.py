import telebot
import requests
import sqlite3
import json
import re
from telebot import types, custom_filters
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
import db
import gpt
from API_KEYS import TELEGRAM_TOKEN


state_storage = StateMemoryStorage()
db.create_db()
bot = telebot.TeleBot(TELEGRAM_TOKEN, state_storage=state_storage)
user_data = {}


class RangeError(Exception):
    pass


class RegisterStates(StatesGroup):
    enter_name = State()
    enter_weight = State()
    enter_target_weight = State()
    enter_age = State()
    enter_height = State()
    enter_sex = State()

class AllStates(StatesGroup):
    register = State()
    base_settings = State()
    handle_photo = State()
    change_weight = State()
    weight = State()


@bot.message_handler(commands=['start'])
def handle_start(message):
    user = db.is_user_registered(message.from_user.id)
    print(user)
    if user:
        name = user[2]
        bot.send_message(
            message.chat.id,
            f"ü•ó –ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {name}!\n\n"
            f"–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥-–±–æ—Ç. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –µ–¥—ã, "
            f"–∏ —è —Ä–∞—Å—Å—á–∏—Ça—é –µ—ë –ö–ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å.\n"
        )
        bot.set_state(message.from_user.id, AllStates.handle_photo, message.chat.id)
    else:
        bot.send_message(
            message.chat.id,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è."
        )
        bot.set_state(message.from_user.id, RegisterStates.enter_name, message.chat.id)


@bot.message_handler(state=RegisterStates.enter_name)
def get_name(message):
    name = message.text.strip()
    if not name:
        bot.send_message(message.chat.id, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['name'] = name
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 72.5):")
    bot.set_state(message.from_user.id, RegisterStates.enter_weight, message.chat.id)


@bot.message_handler(state=RegisterStates.enter_weight)
def get_weight(message):
    try:
        weight = float(message.text.strip())
        if weight <= 0:
            raise ValueError
        elif weight < 30 or weight > 140:
            raise RangeError

    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ XX.X:")
        return
    except RangeError:
        bot.send_message(message.chat.id, "–í–µ—Å –º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 30 –¥–æ 140 –∫–≥")
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['weight'] = weight
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–π –≤–µ—Å –≤–ø–∏—à–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞. –¶–µ–ª–µ–≤–æ–π –≤–µ—Å (–∫–≥) –≤ —Ñ–æ—Ä–º–∞—Ç–µ XX.X:")
    bot.set_state(message.from_user.id, RegisterStates.enter_target_weight, message.chat.id)


@bot.message_handler(state=RegisterStates.enter_target_weight)
def get_target_weight(message):
    try:
        target_weight = float(message.text.strip())
        if target_weight <= 0:
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ XX.X:")
        return

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_weight'] = target_weight


    bot.send_message(
        message.chat.id,
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç"
    )
    bot.set_state(message.from_user.id, RegisterStates.enter_age, message.chat.id)


@bot.message_handler(state=RegisterStates.enter_age)
def get_target_weight(message):
    try:
        age = float(message.text.strip())
        if not(14 <= age <=42):
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –í–æ–∑—Ä–∞—Å—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 14-42 –ª–µ—Ç")
        return

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['age'] = age

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):")
    bot.set_state(message.from_user.id, RegisterStates.enter_height, message.chat.id)


@bot.message_handler(state=RegisterStates.enter_height)
def get_height(message):
    try:
        height = float(message.text.strip())
        if not (100 <= height <= 220):
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 100-220 —Å–º:")
        return

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['height'] = height

    bot.send_message(
        message.chat.id,
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª (Male/Female):"
    )
    bot.set_state(message.from_user.id, RegisterStates.enter_sex, message.chat.id)



@bot.message_handler(state=RegisterStates.enter_sex)
def get_sex(message):
    sex = message.text.strip().capitalize()
    if sex not in ["Male", "Female"]:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ 'Male' –∏–ª–∏ 'Female':")
        return

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['sex'] = sex
        db.register_user(
            message=message,
            data=data,
            days_to_achieve=None
        )
        db.save_recommended_kbju_by_id(message.from_user.id)

    bot.send_message(
        message.chat.id,
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–¢–µ–∫—É—â–∏–π –≤–µ—Å: {data['weight']} –∫–≥\n"
        f"–¶–µ–ª—å: {data['target_weight']} –∫–≥\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"–†–æ—Å—Ç: {data['height']} —Å–º\n"
        f"–ü–æ–ª: {data['sex']}\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ 15 —Ñ–æ—Ç–æ –µ–¥—ã –≤ –¥–µ–Ω—å."
    )
    bot.set_state(message.from_user.id, AllStates.handle_photo, message.chat.id)


@bot.message_handler(content_types=["photo"], state=AllStates.handle_photo)
def handle_photo(message):
    if not db.can_upload_photo(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå –õ–∏–º–∏—Ç —Ñ–æ—Ç–æ –∏—Å—á–µ—Ä–ø–∞–Ω. –î–æ—Å—Ç—É–ø–Ω–æ 15 —Ñ–æ—Ç–æ.")
        return
    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        file_bytes = requests.get(
            f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}"
        ).content
        user_description = message.caption or ""

        result_text = gpt.analyze_food(file_bytes,user_description)
        cleaned = re.sub(r"```(?:json)?\s*([\s\S]+?)```", r"\1", result_text).strip()

        try:
            data = json.loads(cleaned)
            if "total_products" not in data or "products" not in data:
                bot.reply_to(message, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON:\n\n{cleaned}")
                return

            total_products = data["total_products"]
            products = data["products"]
            text_blocks = []


            for idx in range(1, total_products + 1):
                product_key = f"product_{idx}"
                prod = products[product_key]

                protein = float(prod["per_100g"]["protein"])
                fat = float(prod["per_100g"]["fat"])
                carbs = float(prod["per_100g"]["carbs"])
                weight = int(prod["weight"])

                calories_100g = protein * 4 + fat * 9 + carbs * 4
                prod["per_100g"]["calories"] = round(calories_100g, 1)

                prod["total"] = {
                    "protein": round(protein * weight / 100, 1),
                    "fat": round(fat * weight / 100, 1),
                    "carbs": round(carbs * weight / 100, 1),
                    "calories": round(calories_100g * weight / 100, 1),
                }

                block = (
                    f"üçΩ {prod['name']} ({weight} –≥)\n\n"
                    f"‚öñ –ù–∞ 100 –≥:\n"
                    f"  ‚Ä¢ –ë–µ–ª–∫–∏: {protein} –≥\n"
                    f"  ‚Ä¢ –ñ–∏—Ä—ã: {fat} –≥\n"
                    f"  ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥\n"
                    f"  ‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {prod['per_100g']['calories']} –∫–∫–∞–ª\n\n"
                    f"üî• –ò—Ç–æ–≥:\n"
                    f"  ‚Ä¢ –ë–µ–ª–∫–∏: {prod['total']['protein']} –≥\n"
                    f"  ‚Ä¢ –ñ–∏—Ä—ã: {prod['total']['fat']} –≥\n"
                    f"  ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {prod['total']['carbs']} –≥\n"
                    f"  ‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {prod['total']['calories']} –∫–∫–∞–ª\n"
                )
                text_blocks.append(block)

            full_text = "\n\n".join(text_blocks)
            bot.send_message(message.chat.id, full_text)

            db.save_record(message.from_user.id, data)
            user_data[message.chat.id] = {"data": data, "change_idx": None}
        except Exception as e:
            bot.reply_to(message, f"‚ùå GPT –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON:\n\n{cleaned}\n\n–û—à–∏–±–∫–∞: {e}")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['kbju'])
def send_kbju(message):
    telegram_id = message.from_user.id
    conn = sqlite3.connect("data.db")
    cursor = conn.cursor()

    cursor.execute("""
        SELECT recommended_calories, recommended_protein, recommended_fat, recommended_carbs
        FROM recommended_kbju
        WHERE user_id = ?
        ORDER BY id DESC
        LIMIT 1
    """, (telegram_id,))
    kbju = cursor.fetchone()


    if not kbju:
        cursor.execute("""
            SELECT weight, height, age, sex FROM users WHERE telegram_id = ?
        """, (telegram_id,))
        user = cursor.fetchone()
        if not user:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            conn.close()
            return

        weight, height, age, sex = user
        kbju_dict = db.calculate_kbju(weight, height, age, sex)
        cursor.execute("""
            INSERT INTO recommended_kbju (
                user_id, recommended_calories, recommended_protein, recommended_fat, recommended_carbs
            ) VALUES (?, ?, ?, ?, ?)
        """, (
            telegram_id,
            kbju_dict['Calories'],
            kbju_dict['Protein_g'],
            kbju_dict['Fat_g'],
            kbju_dict['Carbs_g']
        ))
        conn.commit()
        kbju = (
            kbju_dict['Calories'],
            kbju_dict['Protein_g'],
            kbju_dict['Fat_g'],
            kbju_dict['Carbs_g']
        )

    conn.close()

    bot.send_message(
        message.chat.id,
        f"ü•ó –í–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ö–ë–ñ–£:\n"
        f"–ö–∞–ª–æ—Ä–∏–∏: {kbju[0]} –∫–∫–∞–ª\n"
        f"–ë–µ–ª–∫–∏: {kbju[1]} –≥\n"
        f"–ñ–∏—Ä—ã: {kbju[2]} –≥\n"
        f"–£–≥–ª–µ–≤–æ–¥—ã: {kbju[3]} –≥"
    )


@bot.message_handler(commands=["menu"])
def show_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", "‚öñ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Å")
    markup.row("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(state=AllStates.weight)
def handle_weight_menu(message):
    try:
        weight = float(message.text.strip())
        if weight <= 0:
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ XX.X:")
        return

    success = db.save_weight(message.from_user.id, weight)
    if not success:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –≤–µ—Å —É–∂–µ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞.")
    else:
        bot.send_message(message.chat.id, f"‚úÖ –í–µ—Å {weight} –∫–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é.")
        bot.delete_state(message.from_user.id, message.chat.id)


@bot.message_handler(func=lambda message: True)
def handle_menu(message):
    if message.text == "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã:")
        bot.set_state(message.from_user.id, AllStates.handle_photo, message.chat.id)

    elif message.text == "‚öñ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Å":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ XX.X:")
        bot.set_state(message.from_user.id, AllStates.weight, message.chat.id)

    elif message.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        stats = db.get_today_stats(message.from_user.id)
        if not stats:
            bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
            return

        caption = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
            f"–ö–∞–ª–æ—Ä–∏–∏: {round(stats['eaten']['Calories'], 1)} / {round(stats['recommended']['Calories'], 1)} –∫–∫–∞–ª\n"
            f"–ë–µ–ª–∫–∏: {round(stats['eaten']['Protein'], 1)} / {round(stats['recommended']['Protein'], 1)} –≥\n"
            f"–ñ–∏—Ä—ã: {round(stats['eaten']['Fat'], 1)} / {round(stats['recommended']['Fat'], 1)} –≥\n"
            f"–£–≥–ª–µ–≤–æ–¥—ã: {round(stats['eaten']['Carbs'], 1)} / {round(stats['recommended']['Carbs'], 1)} –≥"
        )


        img_buf = db.plot_today_stats(message.from_user.id)
        if img_buf:
            bot.send_photo(message.chat.id, img_buf, caption=caption)

        else:
            bot.send_message(message.chat.id, caption)

    else:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling(skip_pending=True)